// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Spotted.Migrations
{
    [DbContext(typeof(CloudyContext))]
    partial class CloudyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("exam_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExamId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("ExamId");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            ExamId = 1,
                            Description = "Foundational knowledge of Azure concepts, services, cloud concepts, security, privacy, pricing, and support.",
                            Title = "AZ-900"
                        },
                        new
                        {
                            ExamId = 2,
                            Description = "Developing solutions for Microsoft Azure.",
                            Title = "AZ-204"
                        });
                });

            modelBuilder.Entity("Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.HasKey("ProfileId");

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            ProfileId = 1,
                            DisplayName = "Seth Behar"
                        },
                        new
                        {
                            ProfileId = 2,
                            DisplayName = "Mike Scared"
                        });
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("CorrectIndex")
                        .HasColumnType("integer")
                        .HasColumnName("correct_index");

                    b.Property<int>("ExamId")
                        .HasColumnType("integer")
                        .HasColumnName("exam_id");

                    b.PrimitiveCollection<string[]>("Options")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_text");

                    b.HasKey("QuestionId");

                    b.HasIndex("ExamId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            CorrectIndex = 1,
                            ExamId = 1,
                            Options = new[] { "Azure SQL Database", "Azure Blob Storage", "Azure Table Storage", "Azure Queue Storage" },
                            QuestionText = "Which Azure service should you use to store unstructured data such as images and videos?"
                        },
                        new
                        {
                            QuestionId = 2,
                            CorrectIndex = 1,
                            ExamId = 1,
                            Options = new[] { "Azure App Service", "Azure Virtual Machines", "Azure Kubernetes Service", "Azure Functions" },
                            QuestionText = "Which Azure service allows you to run virtualized Windows or Linux servers in the cloud?"
                        },
                        new
                        {
                            QuestionId = 3,
                            CorrectIndex = 1,
                            ExamId = 1,
                            Options = new[] { "They provide faster internet connections.", "They protect applications and data from datacenter failures.", "They reduce storage costs for data.", "They automatically scale applications based on demand." },
                            QuestionText = "What is the main benefit of using Azure Availability Zones?"
                        },
                        new
                        {
                            QuestionId = 4,
                            CorrectIndex = 1,
                            ExamId = 1,
                            Options = new[] { "Reserved Instances", "Pay-as-you-go", "Enterprise Agreement", "Free Tier" },
                            QuestionText = "Which pricing model allows you to pay only for the exact amount of resources you use?"
                        },
                        new
                        {
                            QuestionId = 5,
                            CorrectIndex = 0,
                            ExamId = 1,
                            Options = new[] { "Azure Service Health", "Azure Monitor", "Azure Advisor", "Azure Security Center" },
                            QuestionText = "Which Azure tool allows you to view the status of all Azure services globally?"
                        });
                });

            modelBuilder.Entity("Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("topic_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TopicId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ExamId")
                        .HasColumnType("integer")
                        .HasColumnName("exam_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("TopicId");

                    b.HasIndex("ExamId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            TopicId = 1,
                            Description = "Understand cloud concepts (15-20%)",
                            ExamId = 1,
                            Name = "Cloud"
                        },
                        new
                        {
                            TopicId = 2,
                            Description = "Understand core Azure services (30-35%)",
                            ExamId = 1,
                            Name = "AI"
                        },
                        new
                        {
                            TopicId = 3,
                            Description = "Understand security, privacy, compliance, and trust (25-30%)",
                            ExamId = 1,
                            Name = "Security"
                        },
                        new
                        {
                            TopicId = 4,
                            Description = "Understand Azure pricing and support (20-25%)",
                            ExamId = 1,
                            Name = "Data Governance"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.HasKey("UserId");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "sethbehar@gmail.com",
                            ProfileId = 1
                        },
                        new
                        {
                            UserId = 2,
                            Email = "mike@scaredofthedark.com",
                            ProfileId = 2
                        });
                });

            modelBuilder.Entity("UserExams", b =>
                {
                    b.Property<int>("UserExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_exam_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserExamId"));

                    b.Property<int>("ExamId")
                        .HasColumnType("integer")
                        .HasColumnName("exam_id");

                    b.Property<bool>("Passed")
                        .HasColumnType("boolean")
                        .HasColumnName("passed");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserExamId");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("UserExams");
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.HasOne("Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Topic", b =>
                {
                    b.HasOne("Exam", "Exam")
                        .WithMany("Topics")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("Profile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("User", "ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("UserExams", b =>
                {
                    b.HasOne("Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("UserExams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Exam", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Profile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("UserExams");
                });
#pragma warning restore 612, 618
        }
    }
}
